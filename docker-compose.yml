# === DOCKER COMPOSE CONFIGURAZIONE ===
#version: "3.9"

services:

  # --------------------------------------------------
  # DATABASE
  # --------------------------------------------------
  postgres:
    image: postgres:16
    container_name: auth-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: authdb
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - backend

  # --------------------------------------------------
  # GRAFANA
  # --------------------------------------------------
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - prometheus
      #- loki
    networks:
      - backend

  # --------------------------------------------------
  # PROMETHEUS
  # --------------------------------------------------
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - backend

  # # --------------------------------------------------
  # # LOKI
  # # --------------------------------------------------
  # loki:
  #   image: grafana/loki:2.9.0
  #   ports:
  #     - "3100:3100"
  #   command: -config.file=/etc/loki/local-config.yaml
  #   volumes:
  #     - ./loki-config.yaml:/etc/loki/local-config.yaml
  #     - loki-data:/loki
  #   networks:
  #     - backend

  # # --------------------------------------------------
  # # PROMTAIL 
  # # --------------------------------------------------
  # promtail:
  #   image: grafana/promtail:2.9.0
  #   volumes:
  #     - /var/lib/docker/containers:/var/lib/docker/containers:ro
  #     - /var/log:/var/log:ro
  #     - ./promtail-config.yaml:/etc/promtail/promtail.yaml
  #   command: -config.file=/etc/promtail/promtail.yaml
  #   depends_on:
  #     - loki
  #   networks:
  #     - backend

  # --------------------------------------------------
  # CADVISOR 
  # --------------------------------------------------
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - backend

  # --------------------------------------------------
  # AUTH SERVICE
  # --------------------------------------------------
  auth-service:
    build:
      context: ./AuthService
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=${AUTH_DB_CONNECTION_STRING}
      - AdminUser__Email=${ADMIN_EMAIL}
      - AdminUser__Username=${ADMIN_USERNAME}
      - AdminUser__Password=${ADMIN_PASSWORD}
      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
    depends_on:
      - postgres
    restart: on-failure
    networks:
      - backend

  # --------------------------------------------------
  # USER PROFILE SERVICE
  # --------------------------------------------------
  user-profile-service:
    build:
      context: ./UserProfileService
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=${AUTH_DB_CONNECTION_STRING}
      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
    depends_on:
      - postgres
      - auth-service
    restart: on-failure
    networks:
      - backend

  # --------------------------------------------------
  # COCKTAIL-IMPORT SERVICE
  # --------------------------------------------------
  cocktail-import-service:
    build:
      context: ./CocktailImportService
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=${IMPORT_DB_CONNECTION_STRING}
      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
    depends_on:
      - postgres
    restart: on-failure
    networks:
      - backend

  # --------------------------------------------------
  # COCKTAIL-SUBMISSION SERVICE
  # --------------------------------------------------
  cocktail-submission-service:
    build:
      context: ./CocktailSubmissionService
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=${SUBMISSION_DB_CONNECTION_STRING}
      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
    depends_on:
      - postgres
    restart: on-failure
    networks:
      - backend

  # --------------------------------------------------
  # COCKTAIL SERVICE
  # --------------------------------------------------
  cocktail-service:
    build:
      context: ./CocktailService
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=${COCKTAIL_DB_CONNECTION_STRING}
      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
    depends_on:
      - postgres
    restart: on-failure
    networks:
      - backend

  # --------------------------------------------------
  # SEARCH SERVICE
  # --------------------------------------------------
  search-service:
    build:
      context: ./SearchService
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=${SEARCH_DB_CONNECTION_STRING}
      - RefreshJob__IntervalMinutes=${REFRESH_INTERVAL_MINUTES}
      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
    depends_on:
      - postgres
    restart: on-failure
    networks:
      - backend

  # --------------------------------------------------
  # IMAGE FETCHER SERVICE
  # --------------------------------------------------
  image-fetcher-service:
    build:
      context: ./ImageFetcherService
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - Pexels__ApiKey=${PEXELS_API_KEY}
      - Pixabay__ApiKey=${PIXABAY_API_KEY}
      - Unsplash__AccessKey=${UNSPLASH_ACCESS_KEY}
      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
    restart: on-failure
    networks:
      - backend

  # --------------------------------------------------
  # SEARCH HISTORY SERVICE
  # --------------------------------------------------
  search-history-service:
    build:
      context: ./SearchHistoryService
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=${SEARCH_HISTORY_DB_CONNECTION_STRING}
      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
    depends_on:
      - postgres
    restart: on-failure
    networks:
      - backend

  # --------------------------------------------------
  # FAVORITE COCKTAILS SERVICE
  # --------------------------------------------------
  favorite-cocktails-service:
    build:
      context: ./FavoriteCocktailsService
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=${FAVORITE_DB_CONNECTION_STRING}
      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
    depends_on:
      - postgres
    restart: on-failure
    networks:
      - backend

  # --------------------------------------------------
  # GATEWAY
  # --------------------------------------------------
  gateway:
    build:
      context: ./Gateway
    env_file:
      - .env
    environment:
      - ASPNETCORE_URLS=http://+:5000
    ports:
      - "5000:5000"
    depends_on:
      - auth-service
    restart: on-failure
    networks:
      - backend

volumes:
  pgdata:
  grafana-storage:
  #loki-data:

networks:
  backend:
    driver: bridge
